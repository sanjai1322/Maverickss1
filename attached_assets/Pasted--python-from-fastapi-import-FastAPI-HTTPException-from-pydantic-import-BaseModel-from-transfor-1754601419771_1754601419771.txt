```python
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from transformers import pipeline, AutoTokenizer, AutoModel
import sqlite3
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
import logging

# Set up logging to see what's happening
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create a FastAPI app
app = FastAPI()

# Allow frontend to connect to backend (CORS)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Set up SQLite database
conn = sqlite3.connect("mavericks.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE,
        skills TEXT,
        scores TEXT
    )
""")
conn.commit()

# Load Hugging Face models for RAG
tokenizer = AutoTokenizer.from_pretrained("sentence-transformers/all-MiniLM-L6-v2")
model = AutoModel.from_pretrained("sentence-transformers/all-MiniLM-L6-v2")
generator = pipeline("text-generation", model="distilgpt2")

# Define data structures for requests
class UserProfile(BaseModel):
    username: str
    resume: str

class Assessment(BaseModel):
    username: str
    quiz_response: str

# Function to create embeddings (vector representations of text)
def generate_embedding(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
    outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).detach().numpy()

# Profile Agent: Create user profile and extract skills
@app.post("/profile")
async def create_profile(user: UserProfile):
    try:
        # Use RAG to extract skills from resume
        embedding = generate_embedding(user.resume)
        skills = generator("Extract key skills from this resume: " + user.resume, max_length=50)[0]["generated_text"]
        cursor.execute("INSERT INTO users (username, skills) VALUES (?, ?)", (user.username, skills))
        conn.commit()
        logger.info(f"Profile created for {user.username}")
        return {"username": user.username, "skills": skills}
    except Exception as e:
        logger.error(f"Error creating profile: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# Assessment Agent: Process quiz and assign score
@app.post("/assessment")
async def assess_user(assessment: Assessment):
    try:
        # Simulate scoring based on quiz response
        embedding = generate_embedding(assessment.quiz_response)
        score = np.random.randint(60, 100)  # Placeholder for real scoring logic
        cursor.execute("UPDATE users SET scores = ? WHERE username = ?", (str(score), assessment.username))
        conn.commit()
        logger.info(f"Assessment completed for {assessment.username}: Score {score}")
        return {"username": assessment.username, "score": score}
    except Exception as e:
        logger.error(f"Error in assessment: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# Get user progress
@app.get("/progress/{username}")
async def get_progress(username: str):
    cursor.execute("SELECT skills, scores FROM users WHERE username = ?", (username,))
    result = cursor.fetchone()
    if result:
        return {"username": username, "skills": result[0], "scores": result[1]}
    raise HTTPException(status_code=404, detail="User not found")

# Run the server
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```